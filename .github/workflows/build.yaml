name: ESP32 MicroPython

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  schedule:
     - cron: '0 0 * * 0'  # Cada domingo a las 00:00 UTC
  workflow_dispatch:  # Ejecutar manualmente

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Clonar el repositorio
      uses: actions/checkout@v3
      
    - name: Clonar MicroPython
      run: git clone --recurse-submodules https://github.com/micropython/micropython.git

    - name: Clonar s3lcd
      run: git clone https://github.com/russhughes/s3lcd.git

    - name: Instalar dependencias
      run: |
        sudo apt update
        sudo apt install -y build-essential git wget flex bison gperf pkg-config python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0

    - name: Clonar ESP-IDF
      run: |
        mkdir -p esp
        cd esp
        git clone -b v5.2.2 --recursive https://github.com/espressif/esp-idf.git
        cd esp-idf
        ./install.sh esp32s3

    - name: Copiar configuraciÃ³n de la placa
      run: |
        cp -r ESP32_GENERIC_S3_N16R8 micropython/ports/esp32/boards/

    - name: Configurar ESP-IDF
      run: source esp/esp-idf/export.sh

    - name: Compilar MicroPython con s3lcd
      run: |
        cd micropython
        make -C mpy-cross
        cd ports/esp32
        idf.py -D MICROPY_BOARD=ESP32_GENERIC_S3_N16R8 \
          -D MICROPY_USER_C_MODULES=~/s3lcd/src/micropython.cmake \
          -D MICROPY_FROZEN_MANIFEST=~/s3lcd/manifest.py \
          -B build-ESP32_GENERIC_S3_N16R8 build

    - name: Mover binarios
      run: |
        mkdir -p ./artifacts
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/micropython.bin ./artifacts/
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/bootloader/bootloader.bin ./artifacts/
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/partition_table/partition-table.bin ./artifacts/

    - name: Generate Tag
      id: tag
      run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
      
    - name: Create Release
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        automatic_release_tag: ${{ env.TAG_NAME }}
        title: "Release for version ${{ env.TAG_NAME }}"
        files: ./artifacts/*
