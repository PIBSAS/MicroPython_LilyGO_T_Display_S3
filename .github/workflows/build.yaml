name: T-Display-S3

permissions:
  contents: write

on:
  push:
    tags:
     - 'v*'
  schedule:
     - cron: '0 0 * * 0'
  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Clone this repo
      uses: actions/checkout@v4
      
    - name: Clone Micropython now with smartconfig thanks to Walkline80
      run: git clone --recurse-submodules https://github.com/micropython/micropython.git

    - name: Clone repo smartconfig by Walkline80
      run: git clone https://gitee.com/walkline/micropython-smartconfig-cmodule.git smartconfig
    
    - name: Clonar s3lcd
      run: git clone https://github.com/russhughes/s3lcd.git

    - name: Copy tdt_config and config_buttons and fonts
      run: |
       cp "$GITHUB_WORKSPACE/s3lcd/examples/configs/t-display-s3/tft_config.py" "$GITHUB_WORKSPACE/s3lcd/modules/"
       cp "$GITHUB_WORKSPACE/s3lcd/examples/configs/t-display-s3/tft_buttons.py" "$GITHUB_WORKSPACE/s3lcd/modules/"
       cp "$GITHUB_WORKSPACE/s3lcd/examples/chango/chango_16.py" "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
       cp "$GITHUB_WORKSPACE/s3lcd/fonts/vector/gotheng.py" "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
       cp "$GITHUB_WORKSPACE/s3lcd/examples/chango/chango_32.py" "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
       cp "$GITHUB_WORKSPACE/s3lcd/examples/chango/chango_64.py" "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
      # cp $GITHUB_WORKSPACE/s3lcd/fonts/vector/astrol.py "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
      # cp $GITHUB_WORKSPACE/s3lcd/fonts/vector/lowmat.py "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
      # cp $GITHUB_WORKSPACE/s3lcd/fonts/bitmap/vga2_16x32.py "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
      # cp $GITHUB_WORKSPACE/s3lcd/fonts/vector/cyrilc.py "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
      # cp $GITHUB_WORKSPACE/s3lcd/fonts/vector/gothger.py "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
      # cp $GITHUB_WORKSPACE/s3lcd/fonts/vector/gothita.py "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
      # cp $GITHUB_WORKSPACE/s3lcd/fonts/vector/uppmat.py "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
      
    - name: Install dependencies
      run: |
       sudo apt-get update
       sudo apt-get install -y build-essential git wget flex bison gperf pkg-config python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0

    - name: Clone ESP-IDF
      run: |
        mkdir -p esp
        cd esp
        git clone -b v5.3 --recursive https://github.com/espressif/esp-idf.git
        cd esp-idf/tools
        python3 idf_tools.py install cmake
        cd ..
        ./install.sh esp32s3
        cd
      # git clone -b v5.2.2 --recursive https://github.com/espressif/esp-idf.git

    - name: Copy board configuration
      run: |
        cp -r ESP32_GENERIC_S3_N16R8 micropython/ports/esp32/boards/

    - name: Compile with S3LCD + SmartConfig
      continue-on-error: true
      run: |
        source esp/esp-idf/export.sh
        cd micropython/
        make -C mpy-cross
        export IDF_TARGET=esp32s3
        cd ports/esp32/
        idf.py \
          -D MICROPY_BOARD=ESP32_GENERIC_S3_N16R8 \
          -D MICROPY_BOARD_DIR="$GITHUB_WORKSPACE/micropython/ports/esp32/boards/ESP32_GENERIC_S3_N16R8" \
          -D USER_C_MODULES="$GITHUB_WORKSPACE/micropython.cmake" \
          -D MICROPY_FROZEN_MANIFEST="$GITHUB_WORKSPACE/s3lcd/manifest.py" \
          -B build-ESP32_GENERIC_S3_N16R8 build
    
    - name: Move binaries with S3LCD + SmartConfig
      if: success() || failure()
      run: |
        mkdir -p ./artifacts
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/micropython.bin ./artifacts/micropython_smart.bin || true
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/bootloader/bootloader.bin ./artifacts/bootloader_smart.bin || true
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/partition_table/partition-table.bin ./artifacts/partition-table_smart.bin || true

    - name: Compilar MicroPython + S3LCD
      continue-on-error: true
      run: |
        source esp/esp-idf/export.sh
        cd micropython/
        make -C mpy-cross
        export IDF_TARGET=esp32s3
        cd ports/esp32/
        idf.py -D MICROPY_BOARD=ESP32_GENERIC_S3_N16R8 \
               -D MICROPY_BOARD_DIR="$GITHUB_WORKSPACE/micropython/ports/esp32/boards/ESP32_GENERIC_S3_N16R8" \
               -D USER_C_MODULES="$GITHUB_WORKSPACE/s3lcd/src/micropython.cmake" \
               -D MICROPY_FROZEN_MANIFEST="$GITHUB_WORKSPACE/s3lcd/manifest.py" \
               -B build-ESP32_GENERIC_S3_N16R8_no_smart build

    
    - name: Mover binarios MicroPython + S3LCD
      if: success() || failure()
      run: |
        mkdir -p ./artifacts
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8_no_smart/micropython.bin ./artifacts/micropython.bin || true
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8_no_smart/bootloader/bootloader.bin ./artifacts/bootloader.bin || true
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8_no_smart/partition_table/partition-table.bin ./artifacts/partition-table.bin || true
    
    - name: Get MicroPython Version from mpconfig.h
      run: |
        cd micropython/
        MAJOR=$(grep -oP '(?<=#define MICROPY_VERSION_MAJOR )[0-9]+' py/mpconfig.h)
        MINOR=$(grep -oP '(?<=#define MICROPY_VERSION_MINOR )[0-9]+' py/mpconfig.h)
        MICRO=$(grep -oP '(?<=#define MICROPY_VERSION_MICRO )[0-9]+' py/mpconfig.h)
        PRERELEASE=$(grep -oP '(?<=#define MICROPY_VERSION_PRERELEASE )[0-9]+' py/mpconfig.h)

        if [ "$PRERELEASE" -eq 1 ]; then
          MPY_VERSION="$MAJOR.$MINOR.$MICRO-preview"
        else
          MPY_VERSION="$MAJOR.$MINOR.$MICRO"
        fi

        echo "MPY_VERSION=$MPY_VERSION" >> $GITHUB_ENV
    
    - name: Generate Tag
      id: tag
      run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
      
    - name: GH Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "MicroPython for LilyGo T-Display S3 with S3LCD Driver release version ${{ env.MPY_VERSION }} (Build ${{ env.TAG_NAME }})"
        body: |
          Automated release for MicroPython.
          
          ## What we get here: 
          - MicroPython with S3LCD Display Driver:
            - ```micropython.bin, bootloader.bin and partition-table.bin.```
          - MicroPython with S3LCD Display Driver and SmartConfig module:
            - ```micropython_smart.bin, bootloader_smart.bin and partition-table_smart.bin.```
          # Instructions
            You need to have some dependencies pre-instaled in your OS:
            - Python 3
            - Pip
            - Python VENV
          ## Windows:
          ````bash
          python -m venv esp-env
          ````
          
          ````bash
          .\esp-env\Scripts\activate
          ````
          
          or
          
          ````bash
          py -m venv esp-env
          ````
          
          ````bash
          .\esp-env\Scripts\activate
          ````
          
          ### Then install esptool:
          ````bash
          pip install esptool
          ````
          
          ### Put ESP32-S3-WROOM-1 N16R8 in BOOTLOADER MODE:
          - With USB cable on USB COM Port, press BOOT button then RST button, release RST, then release BOOT button. Or unplug, press BOOT button meanwhile you plug in the usb cable to PC or SBC like a Raspberry Pi.
          
          ### Erase Flash:
          #### Step for MicroPython + S3LCD.
          ````bash
          python -m esptool --chip esp32s3 erase_flash
          ````
          ### Then Flash:
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ````bash
          python -m esptool --chip esp32s3 -b 460800 --before default_reset --after no_reset write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x10000 micropython.bin
          ````
          
          ### Erase Flash:
          #### Step for MicroPython + S3LCD + SmartConfig:
          ````bash
          python -m esptool --chip esp32s3 erase_flash
          ````
          ### Then Flash:
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ````bash
          python -m esptool --chip esp32s3 -b 460800 --before default_reset --after no_reset write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader_smart.bin 0x8000 partition-table_smart.bin 0x10000 micropython_smart.bin
          ````
          
          ## Linux:
          
          ````bash
          python -m venv esp-env
          ````
          
          ````bash
          source esp-env/bin/activate
          ````
          
          ### Then install esptool:
          ````bash
          pip install esptool
          ````
          
          ### Put ESP32-S3-WROOM-1 N16R8 in BOOTLOADER MODE:
          - With USB cable on USB COM Port, press BOOT button then RST button, release RST, then release BOOT button. Or unplug, press BOOT button meanwhile you plug in the usb cable to PC or SBC like a Raspberry Pi.
          
          ### Erase Flash:
          #### Step for MicroPython + S3LCD.
          ````bash
          python -m esptool --chip esp32s3 erase_flash
          ````
          ### Then Flash:
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ````bash
          python -m esptool --chip esp32s3 -b 460800 --before default_reset --after no_reset write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x10000 micropython.bin
          ````
          
          ### Erase Flash:
          #### Step for MicroPython + S3LCD + SmartConfig:
          ````bash
          python -m esptool --chip esp32s3 erase_flash
          ````
          ### Then Flash:
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ````bash
          python -m esptool --chip esp32s3 -b 460800 --before default_reset --after no_reset write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader_smart.bin 0x8000 partition-table_smart.bin 0x10000 micropython_smart.bin
          ````
          
          ### NOTE IN WINDOWS:
          - If you get a PowerShell Scripts Policy Execution Exception that don't let you activate the Virtual Environment:
          
           ````bash
          .\esp-env\Scripts\activate
          ````
          
          - Then open a Terminal like Administrator and type:
          
          ````bash
          Set-ExecutionPolicy Unrestricted
          ````
          - Close the Terminal now you can activate the Python Virtual Enmvironment
          
        draft: false
        prerelease: false
        files: ./artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
